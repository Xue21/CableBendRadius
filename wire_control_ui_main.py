# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pymysql
from PIL import Image
import pickle
import cv2
import numpy as np
import math
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QTimer
import pyrealsense2 as rs
from paddleocr import PaddleOCR
import os
from wire_prediction import radius_predict
from net.deeplab import DeeplabV3


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.ocr = PaddleOCR(use_angle_cls=True, lang='en')
        # 创建realsense上下文
        self.ctx = rs.context()
        self.devices= self.ctx.query_devices()

        #定义Realsense视频数据流
        self.pipeline = rs.pipeline()
        self.config = rs.config()
        self.config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
        self.config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)
        # 创建对齐对象
        self.align = rs.align(rs.stream.color)
        self.pipeline.start(self.config)
        # # # 定义孔填充过滤器
        self.hole_filling = rs.hole_filling_filter()
        self.filename = None
        self.image = None
        self.depth = None
        # 连接数据库
        self.db = pymysql.connect(host='127.0.0.1',
                                  user='root',
                                  password='123456',
                                  database='buxianjianche')
        self.cursor = self.db.cursor()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 920)
        MainWindow.setStyleSheet("border-color: rgb(0, 133, 199);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Image_show = QtWidgets.QLabel(self.centralwidget)
        self.Image_show.setGeometry(QtCore.QRect(300, 120, 480, 360))
        self.Image_show.setStyleSheet("background-color: rgb(0, 0, 0);\n"
                                      "font: 6pt \"微软雅黑\";")
        self.Image_show.setObjectName("Image_show")
        self.pushButton_play = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_play.setGeometry(QtCore.QRect(30, 120, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_play.setFont(font)
        self.pushButton_play.setObjectName("pushButton_play")
        self.pushButton_ocr = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_ocr.setGeometry(QtCore.QRect(30, 520, 150, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_ocr.setFont(font)
        self.pushButton_ocr.setObjectName("pushButton_ocr")
        self.pushButton_radius = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_radius.setGeometry(QtCore.QRect(30, 710, 150, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_radius.setFont(font)
        self.pushButton_radius.setObjectName("pushButton_radius")
        self.pushButton_open_bendi = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open_bendi.setGeometry(QtCore.QRect(130, 200, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_open_bendi.setFont(font)
        self.pushButton_open_bendi.setObjectName("pushButton_open_bendi")
        self.pushButton_chakan = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_chakan.setGeometry(QtCore.QRect(30, 430, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_chakan.setFont(font)
        self.pushButton_chakan.setObjectName("pushButton_chakan")
        self.pushButton_save_bendi = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_save_bendi.setGeometry(QtCore.QRect(30, 200, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_save_bendi.setFont(font)
        self.pushButton_save_bendi.setObjectName("pushButton_save_bendi")
        self.image_jianche = QtWidgets.QLabel(self.centralwidget)
        self.image_jianche.setGeometry(QtCore.QRect(300, 520, 480, 360))
        self.image_jianche.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.image_jianche.setObjectName("image_jianche")
        self.label_jianche = QtWidgets.QLabel(self.centralwidget)
        self.label_jianche.setGeometry(QtCore.QRect(480, 90, 211, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_jianche.setFont(font)
        self.label_jianche.setObjectName("label_jianche")
        self.label_jieguo = QtWidgets.QLabel(self.centralwidget)
        self.label_jieguo.setGeometry(QtCore.QRect(510, 490, 101, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.label_jieguo.setFont(font)
        self.label_jieguo.setObjectName("label_jieguo")
        self.label_bendi = QtWidgets.QLabel(self.centralwidget)
        self.label_bendi.setGeometry(QtCore.QRect(30, 159, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_bendi.setFont(font)
        self.label_bendi.setObjectName("label_bendi")
        self.label_shujuku = QtWidgets.QLabel(self.centralwidget)
        self.label_shujuku.setGeometry(QtCore.QRect(30, 240, 101, 40))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_shujuku.setFont(font)
        self.label_shujuku.setObjectName("label_shujuku")
        self.pushButton_xinjian_sj = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_xinjian_sj.setGeometry(QtCore.QRect(30, 280, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_xinjian_sj.setFont(font)
        self.pushButton_xinjian_sj.setObjectName("pushButton_xinjian_sj")
        self.pushButton_save_sj = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_save_sj.setGeometry(QtCore.QRect(30, 330, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_save_sj.setFont(font)
        self.pushButton_save_sj.setObjectName("pushButton_save_sj")
        self.pushButton_open_sj = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open_sj.setGeometry(QtCore.QRect(30, 380, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_open_sj.setFont(font)
        self.pushButton_open_sj.setObjectName("pushButton_open_sj")
        self.lineEdit_sjbiao = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_sjbiao.setGeometry(QtCore.QRect(120, 290, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_sjbiao.setFont(font)
        self.lineEdit_sjbiao.setObjectName("lineEdit_sjbiao")
        self.lineEdit_save_name = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_save_name.setGeometry(QtCore.QRect(120, 340, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_save_name.setFont(font)
        self.lineEdit_save_name.setObjectName("lineEdit_save_name")
        self.lineEdit_open_name = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_open_name.setGeometry(QtCore.QRect(120, 390, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_open_name.setFont(font)
        self.lineEdit_open_name.setObjectName("lineEdit_open_name")
        self.label_xianxing = QtWidgets.QLabel(self.centralwidget)
        self.label_xianxing.setGeometry(QtCore.QRect(40, 580, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_xianxing.setFont(font)
        self.label_xianxing.setObjectName("label_xianxing")
        self.label_pingtai = QtWidgets.QLabel(self.centralwidget)
        self.label_pingtai.setGeometry(QtCore.QRect(240, 0, 461, 51))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_pingtai.setFont(font)
        self.label_pingtai.setObjectName("label_pingtai")
        self.label_waijing = QtWidgets.QLabel(self.centralwidget)
        self.label_waijing.setGeometry(QtCore.QRect(40, 620, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_waijing.setFont(font)
        self.label_waijing.setObjectName("label_waijing")
        self.lineEdit_xianxing = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_xianxing.setGeometry(QtCore.QRect(100, 580, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_xianxing.setFont(font)
        self.lineEdit_xianxing.setText("")
        self.lineEdit_xianxing.setObjectName("lineEdit_xianxing")
        self.lineEdit_waijing = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_waijing.setGeometry(QtCore.QRect(100, 620, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_waijing.setFont(font)
        self.lineEdit_waijing.setText("")
        self.lineEdit_waijing.setObjectName("lineEdit_waijing")
        self.label_bilv = QtWidgets.QLabel(self.centralwidget)
        self.label_bilv.setGeometry(QtCore.QRect(40, 660, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_bilv.setFont(font)
        self.label_bilv.setObjectName("label_bilv")
        self.lineEdit_bilv = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_bilv.setGeometry(QtCore.QRect(100, 660, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_bilv.setFont(font)
        self.lineEdit_bilv.setText("")
        self.lineEdit_bilv.setObjectName("lineEdit_bilv")
        self.lineEdit_jieguo = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_jieguo.setGeometry(QtCore.QRect(100, 770, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_jieguo.setFont(font)
        self.lineEdit_jieguo.setText("")
        self.lineEdit_jieguo.setObjectName("lineEdit_jieguo")
        self.label_zhewanjieguo = QtWidgets.QLabel(self.centralwidget)
        self.label_zhewanjieguo.setGeometry(QtCore.QRect(40, 770, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_zhewanjieguo.setFont(font)
        self.label_zhewanjieguo.setObjectName("label_zhewanjieguo")
        self.tableWidge_database = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidge_database.setGeometry(QtCore.QRect(120, 430, 120, 60))
        self.tableWidge_database.setObjectName("tableWidge_database")
        self.tableWidge_database.setColumnCount(1)
        # self.tableWidge_database.setRowCount(0)
        self.pushButton_remove = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_remove.setGeometry(QtCore.QRect(130, 120, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_remove.setFont(font)
        self.pushButton_remove.setObjectName("pushButton_remove")
        self.pushButton_quit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_quit.setGeometry(QtCore.QRect(30, 820, 80, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_quit.setFont(font)
        self.pushButton_quit.setObjectName("pushButton_quit")

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Image_show.setText(_translate("MainWindow", "Image Video"))
        self.pushButton_play.setText(_translate("MainWindow", "放映"))
        self.pushButton_ocr.setText(_translate("MainWindow", "线缆OCR检测"))
        self.pushButton_radius.setText(_translate("MainWindow", "折弯半径检测"))
        self.pushButton_open_bendi.setText(_translate("MainWindow", "打开"))
        self.pushButton_chakan.setText(_translate("MainWindow", "查看"))
        self.pushButton_save_bendi.setText(_translate("MainWindow", "保存"))
        self.image_jianche.setText(_translate("MainWindow", "TextLabel"))
        self.label_jianche.setText(_translate("MainWindow", "摄像头实时监控"))
        self.label_jieguo.setText(_translate("MainWindow", "检测结果"))
        self.label_bendi.setText(_translate("MainWindow", "本地"))
        self.label_shujuku.setText(_translate("MainWindow", "数据库"))
        self.pushButton_xinjian_sj.setText(_translate("MainWindow", "新建"))
        self.pushButton_save_sj.setText(_translate("MainWindow", "保存"))
        self.pushButton_open_sj.setText(_translate("MainWindow", "打开"))
        self.lineEdit_sjbiao.setText(_translate("MainWindow", "0417_qian"))
        self.lineEdit_save_name.setText(_translate("MainWindow", "保存文件名"))
        self.lineEdit_open_name.setText(_translate("MainWindow", "打开文件名"))
        self.label_xianxing.setText(_translate("MainWindow", "线型："))
        self.label_pingtai.setText(_translate("MainWindow", "     布线检测控制平台"))
        self.label_waijing.setText(_translate("MainWindow", "外径："))
        self.label_bilv.setText(_translate("MainWindow", "比率："))
        self.lineEdit_waijing.setText(_translate("MainWindow", "3"))
        self.lineEdit_bilv.setText(_translate("MainWindow", "3"))
        self.label_zhewanjieguo.setText(_translate("MainWindow", "结果："))
        self.pushButton_remove.setText(_translate("MainWindow", "清除"))
        self.pushButton_quit.setText(_translate("MainWindow", "退出"))

    def create_table(self):
        table_name = self.lineEdit_sjbiao.text()
        # 创建表格
        sql = "CREATE TABLE IF NOT EXISTS {} (name varchar(255) PRIMARY KEY, data_image BLOB, data_depth BLOB)".format(
                table_name)
        self.cursor.execute(sql)
        # 增加data_image列的数据长度为2000000
        self.cursor.execute("ALTER TABLE {} MODIFY COLUMN data_image BLOB(2000000)".format(table_name))
        self.cursor.execute("ALTER TABLE {} MODIFY COLUMN data_depth BLOB(2000000)".format(table_name))

    def seeTable(self):
        table_name = self.lineEdit_sjbiao.text()
        # 执行查询获取第一列文件名列表
        self.cursor.execute('SELECT name FROM {}'.format(table_name))
        file_names = [row[0] for row in self.cursor.fetchall()]
        # 将文件名列表插入到QTableWidget控件中
        self.tableWidge_database.setRowCount(len(file_names))
        for i, file_name in enumerate(file_names):
            item = QtWidgets.QTableWidgetItem(file_name)
            self.tableWidge_database.setItem(i, 0, item)

    def save_database(self):
        table_name = self.lineEdit_sjbiao.text()
        # 获取输入框中的文本并插入数据表
        name = self.lineEdit_save_name.text()
        if self.pushButton_play.text() == "就绪":
            save = False
            while not save:
                frames = self.pipeline.wait_for_frames()
                aligned_frames = self.align.process(frames)
                color_frame = aligned_frames.get_color_frame()
                depth_frame = aligned_frames.get_depth_frame()
                depth_frame = self.hole_filling.process(depth_frame)
                # Convert frames to numpy arrays
                color_image = np.asanyarray(color_frame.get_data())
                depth_image = np.asanyarray(depth_frame.get_data())
                if not color_image.any():
                    continue
                else:
                    save = True
                    # 将numpy数组序列化为二进制格式
                    img_bytes = pickle.dumps(color_image)
                    depth_bytes = pickle.dumps(depth_image)
                    # 插入二进制数据到数据库
                    sql = 'INSERT INTO {} (name, data_image) VALUES (%s, %s) ON DUPLICATE KEY UPDATE data_image=VALUES(data_image)'.format(
                        table_name)
                    self.cursor.execute(sql, (name, img_bytes))
                    self.db.commit()
                    sql = 'INSERT INTO {} (name, data_depth) VALUES (%s, %s) ON DUPLICATE KEY UPDATE data_depth=VALUES(data_depth)'.format(
                        table_name)
                    self.cursor.execute(sql, (name, depth_bytes))
                    self.db.commit()

    def toggle_capture(self):
        if self.pushButton_play.text() == "放映":
            self.timer = QTimer()
            self.timer.timeout.connect(self.show_image)
            self.timer.start(10)
            self.pushButton_play.setText("就绪")
        else:
            self.pushButton_play.setText("放映")
            self.timer.stop()
            self.Image_show.clear()
            self.Image_show.setText("Image Video")

    def show_image(self):
        # Get frames from camera
        frames = self.pipeline.wait_for_frames()
        aligned_frames = self.align.process(frames)
        color_frame = aligned_frames.get_color_frame()
        depth_frame = aligned_frames.get_depth_frame()
        # Convert frames to numpy arrays
        color_image = np.asarray(color_frame.get_data())
        depth_image = np.asarray(depth_frame.get_data())

        # Display color image
        color_image = cv2.cvtColor(color_image, cv2.COLOR_BGR2RGB)
        # 缩放图片
        color_image = cv2.resize(color_image, (480, 360))
        height, width, channel = color_image.shape
        bytesPerLine = channel * width
        qImg = QImage(color_image.data, width, height, bytesPerLine, QImage.Format_RGB888)
        self.Image_show.setPixmap(QtGui.QPixmap.fromImage(qImg))

    def ocrPredict(self):
        """从第一个线缆型号获得线缆信息"""
        result = self.ocr.ocr(self.image, cls=True)
        if not result[0]:
            self.lineEdit_xianxing.setText('None')
            image = self.image.copy()
            # 获取输入图像的大小
            h, w = image.shape[:2]
            if h != 480 or w != 640: image = cv2.resize(image, (640, 480))
            # Display color image
            color_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            # 缩放图片
            color_image = cv2.resize(color_image, (480, 360))
            height, width, channel = color_image.shape
            bytesPerLine = channel * width
            qImg = QImage(color_image.data, width, height, bytesPerLine, QImage.Format_RGB888)
            self.image_jianche.setPixmap(QtGui.QPixmap.fromImage(qImg))
        else:
            image = self.image.copy()
            num_wire = []
            for idx in range(len(result)):
                res = result[idx]
                for line in res:
                    bbox = line[0]
                    # 得到轮廓
                    contour = np.array([bbox], dtype=np.int32)
                    # 得到最小外接矩形
                    x, y, w, h = cv2.boundingRect(contour)
                    text = line[1][0]
                    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
                    cv2.putText(image, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                    num_wire.append(text)
            print(num_wire)
            for i in range(len(num_wire)):
                self.cursor.execute("SELECT * FROM cabels_type WHERE name=%s", (num_wire[i],))
                result = self.cursor.fetchone()
                if result != None:
                    self.lineEdit_xianxing.setText(num_wire[i])
                    self.lineEdit_waijing.setText(result[1])
                    self.lineEdit_bilv.setText(result[2])
                    break
                else:
                    self.lineEdit_xianxing.setText('None')
            #检测结果显示
            # Display color image
            # 获取输入图像的大小
            h, w = image.shape[:2]
            if h != 480 or w != 640: image = cv2.resize(image, (640, 480))
            # Display color image
            color_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            # 缩放图片
            color_image = cv2.resize(color_image, (480, 360))
            height, width, channel = color_image.shape
            bytesPerLine = channel * width
            qImg = QImage(color_image.data, width, height, bytesPerLine, QImage.Format_RGB888)
            self.image_jianche.setPixmap(QtGui.QPixmap.fromImage(qImg))

    def wire_predict(self):
        deeplab = DeeplabV3()
        mode = "predict"
        count = False
        name_classes = ["background", "line"]
        image = Image.fromarray(self.image)
        r_image = deeplab.detect_image(image, count=count, name_classes=name_classes)
        r_image = np.array(r_image)
        r_image = cv2.cvtColor(r_image, cv2.COLOR_BGR2RGB)
        depth_image = self.depth
        radius, img = radius_predict(r_image, depth_image)
        print(radius)
        # 输出图像类型
        print("Image type:", img.dtype)
        # 图像数据类型转换
        img_uint8 = (img * 255).astype(np.uint8)
        if radius:
            for mid_point, radiu in radius.items():
                # 将文本渲染到图像上
                cv2.putText(img_uint8, str(radiu), mid_point, cv2.FONT_HERSHEY_SIMPLEX, 1, 255, 2)
            # 缩放图像
            img_uint8 = cv2.resize(img_uint8, (480, 360))
            height, width = img_uint8.shape
            bytesPerLine = width
            q_img = QImage(img_uint8.data, width, height, bytesPerLine, QImage.Format_Grayscale8)
            # 转换成QPixmap格式
            q_pixmap = QPixmap(q_img)
            self.image_jianche.setPixmap(q_pixmap)

            #外径和比率信息
            waijing = float(self.lineEdit_waijing.text())
            bilv = float(self.lineEdit_bilv.text())
            min_radiu = waijing * bilv
            r_cheliang = []
            for radiu in radius.values():
                if radiu is not None:
                    r_cheliang.append(float(radiu))
            if r_cheliang:
                r_cl = min(r_cheliang)
                if r_cl <= min_radiu:
                    self.lineEdit_jieguo.setText('不合格')
                elif min_radiu < r_cl <= min_radiu + 10:
                    self.lineEdit_jieguo.setText('警告')
                else:
                    self.lineEdit_jieguo.setText('合格')
            else:
                self.lineEdit_jieguo.setText('None')
        else:
            self.lineEdit_jieguo.setText('None')
            # 缩放图像
            img_uint8 = cv2.resize(img_uint8, (480, 360))
            height, width = img_uint8.shape
            bytesPerLine = width
            q_img = QImage(img_uint8.data, width, height, bytesPerLine, QImage.Format_Grayscale8)
            # 转换成QPixmap格式
            q_pixmap = QPixmap(q_img)
            self.image_jianche.setPixmap(q_pixmap)



    def open_image_bendi(self):
        if self.pushButton_play.text() == "放映":
            # 打开文件对话框，选择图片文件
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            self.filename, _ = QFileDialog.getOpenFileName(self, "选择图片", "", "Images (*.png *.xpm *.jpg *.bmp *.jpeg)",
                                                           options=options)
            # 将图像文件显示在QLabel组件上
            if self.filename:
                # 如果成功选择了文件，则显示图片
                print(self.filename)
                self.image = cv2.imread(self.filename)
                image = self.image.copy()
                # 获取输入图像的大小
                h, w = image.shape[:2]
                if h != 480 or w != 640:image = cv2.resize(image,(640,480))
                # Display color image
                color_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                # 缩放图片
                color_image = cv2.resize(color_image, (480, 360))
                height, width, channel = color_image.shape
                bytesPerLine = channel * width
                qImg = QImage(color_image.data, width, height, bytesPerLine, QImage.Format_RGB888)
                self.Image_show.setPixmap(QtGui.QPixmap.fromImage(qImg))
                # 从文本文件中加载深度图像数据
                folder_path, file_name = os.path.split(self.filename)
                folder_name, _ = os.path.splitext(file_name)
                txt_file_path = os.path.join(folder_path, folder_name + ".txt")
                if os.path.exists(txt_file_path):
                    self.depth = np.loadtxt(txt_file_path, delimiter=',')
                else:
                    # 不加载文件的代码
                    pass

                print(txt_file_path)

    def open_image_database(self):
        table_name = self.lineEdit_sjbiao.text()
        # 获取输入框中的文本并插入数据表
        name = self.lineEdit_open_name.text()
        # 执行查询获取第一列文件名列表
        self.cursor.execute('SELECT name FROM {}'.format(table_name))
        file_names = [row[0] for row in self.cursor.fetchall()]
        print(file_names)
        if name in file_names:
            if self.pushButton_play.text() == "放映":
                # 从数据库中读取二进制数据并反序列化为numpy数组
                self.cursor.execute("SELECT * FROM {} WHERE name=%s".format(table_name), (name,))
                result = self.cursor.fetchone()
                img_bytes = result[1]
                depth_bytes = result[2]
                img_array = pickle.loads(img_bytes)
                depth_array = pickle.loads(depth_bytes)
                # 将numpy数组转换回图像
                recovered_img = np.uint8(img_array)
                self.image = recovered_img
                self.depth = depth_array
                # Display color image
                color_image = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
                # 缩放图片
                color_image = cv2.resize(color_image, (480, 360))
                height, width, channel = color_image.shape
                bytesPerLine = channel * width
                qImg = QImage(color_image.data, width, height, bytesPerLine, QImage.Format_RGB888)
                self.Image_show.setPixmap(QtGui.QPixmap.fromImage(qImg))

    def remove(self):
        self.Image_show.clear()
        self.image_jianche.clear()
        self.Image_show.setText("Image Video")
        self.filename = None
        self.depth = None
        self.image = None

    def save_bendi(self):
        if self.pushButton_play.text() == "就绪":
            save = False
            while not save:
                frames = self.pipeline.wait_for_frames()
                aligned_frames = self.align.process(frames)
                color_frame = aligned_frames.get_color_frame()
                depth_frame = aligned_frames.get_depth_frame()
                depth_frame = self.hole_filling.process(depth_frame)
                # Convert frames to numpy arrays
                color_image = np.asarray(color_frame.get_data())
                depth_image = np.asarray(depth_frame.get_data())
                if not color_image.any():
                    continue
                else:
                    save = True
                    # Choose the save file path
                    options = QFileDialog.Options()
                    options |= QFileDialog.DontUseNativeDialog
                    filePath, _ = QFileDialog.getSaveFileName(self, "Save file", "", "All Files (*);;JPEG Files (*.jpg)",
                                                              options=options)
                    if filePath:
                        cv2.imwrite(filePath, color_image)
                        print(filePath)
                        folder_path, file_name = os.path.split(filePath)
                        folder_name, _ = os.path.splitext(file_name)
                        txt_file_path = os.path.join(folder_path, folder_name + ".txt")
                        # 将深度图像数据保存到文本文件
                        np.savetxt(txt_file_path, depth_image, delimiter=',')

    def slot_init(self):
        """建立通信"""
        self.pushButton_play.clicked.connect(self.toggle_capture)
        self.pushButton_ocr.clicked.connect(self.ocrPredict)
        self.pushButton_radius.clicked.connect(self.wire_predict)
        self.pushButton_open_bendi.clicked.connect(self.open_image_bendi)
        self.pushButton_remove.clicked.connect(self.remove)
        self.pushButton_save_bendi.clicked.connect(self.save_bendi)
        self.pushButton_xinjian_sj.clicked.connect(self.create_table)
        self.pushButton_save_sj.clicked.connect(self.save_database)
        self.pushButton_open_sj.clicked.connect(self.open_image_database)
        self.pushButton_chakan.clicked.connect(self.seeTable)
        self.pushButton_quit.clicked.connect(QApplication.quit)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    ui.slot_init()
    mainWindow.show()
    sys.exit(app.exec_())